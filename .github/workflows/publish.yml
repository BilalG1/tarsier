name: Testing Platform
on:
  push:
    branches: [ "main" ]
    paths:
      - "pyproject.toml"

env:
  PYTHON_VERSION: "3.11"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check-version.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v2
      - name: Check if current version is published
        id: check-version
        run: |
          LOCAL_VERSION=$(poetry version -s)
          REMOTE_VERSION=$(curl -s https://pypi.org/pypi/tarsier/json | jq -r .info.version)
          
          echo "Local version: $LOCAL_VERSION"
          echo "Remote version: $REMOTE_VERSION"
          
          if [ "$LOCAL_VERSION" -ne  "$REMOTE_VERSION" ]; then
              echo "Version $LOCAL_VERSION is not published yet"
              echo "should_publish=true" >> "$GITHUB_OUTPUT"
          fi


  publish:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_publish == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - run: poetry install
      - name: Run isort check
        run: poetry run isort --check .
      - name: Run black check
        run: poetry run black --check .
      - name: Run mypy check
        run: poetry run mypy .
      - name: Run pytest check
        run: poetry run pytest -vv --cov="tarsier" .
      - name: Build and Publish
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish --build
